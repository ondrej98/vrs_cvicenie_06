
vrs_cvicenie_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001408  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001590  08001590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b8  080015b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080015b8  080015b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b8  080015b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b8  080015b8  000115b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015bc  080015bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080015c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004b43  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013c0  00000000  00000000  00024b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000540  00000000  00000000  00025f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004a8  00000000  00000000  00026478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000159d0  00000000  00000000  00026920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000044bd  00000000  00000000  0003c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072e9b  00000000  00000000  000407ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b3648  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013f4  00000000  00000000  000b369c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001578 	.word	0x08001578

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001578 	.word	0x08001578

080001c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d2:	695a      	ldr	r2, [r3, #20]
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	695a      	ldr	r2, [r3, #20]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	463b      	mov	r3, r7
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800022a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800022e:	f7ff ffcb 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000232:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000236:	f7ff ffc7 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800023a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800023e:	f7ff ffc3 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000242:	2108      	movs	r1, #8
 8000244:	480a      	ldr	r0, [pc, #40]	; (8000270 <MX_GPIO_Init+0x5c>)
 8000246:	f7ff ffd7 	bl	80001f8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800024a:	2308      	movs	r3, #8
 800024c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800024e:	2301      	movs	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800025e:	463b      	mov	r3, r7
 8000260:	4619      	mov	r1, r3
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <MX_GPIO_Init+0x5c>)
 8000264:	f000 fe12 	bl	8000e8c <LL_GPIO_Init>

}
 8000268:	bf00      	nop
 800026a:	3718      	adds	r7, #24
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	48000400 	.word	0x48000400

08000274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f003 0307 	and.w	r3, r3, #7
 8000282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000290:	4013      	ands	r3, r2
 8000292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800029c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <__NVIC_SetPriorityGrouping+0x44>)
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	60d3      	str	r3, [r2, #12]
}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <LL_RCC_HSI_Enable+0x1c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <LL_RCC_HSI_Enable+0x1c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000

080002dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <LL_RCC_HSI_IsReady+0x20>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f003 0302 	and.w	r3, r3, #2
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2db      	uxtb	r3, r3
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000

08000300 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	00db      	lsls	r3, r3, #3
 8000314:	4904      	ldr	r1, [pc, #16]	; (8000328 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000316:	4313      	orrs	r3, r2
 8000318:	600b      	str	r3, [r1, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000

0800032c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <LL_RCC_SetSysClkSource+0x24>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	f023 0203 	bic.w	r2, r3, #3
 800033c:	4904      	ldr	r1, [pc, #16]	; (8000350 <LL_RCC_SetSysClkSource+0x24>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4313      	orrs	r3, r2
 8000342:	604b      	str	r3, [r1, #4]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <LL_RCC_GetSysClkSource+0x18>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f003 030c 	and.w	r3, r3, #12
}
 8000360:	4618      	mov	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <LL_RCC_SetAHBPrescaler+0x24>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <LL_RCC_SetAHBPrescaler+0x24>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	604b      	str	r3, [r1, #4]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80003a8:	4904      	ldr	r1, [pc, #16]	; (80003bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	604b      	str	r3, [r1, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003d0:	4904      	ldr	r1, [pc, #16]	; (80003e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	604b      	str	r3, [r1, #4]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <LL_RCC_PLL_Enable+0x1c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <LL_RCC_PLL_Enable+0x1c>)
 80003f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <LL_RCC_PLL_IsReady+0x24>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000418:	bf0c      	ite	eq
 800041a:	2301      	moveq	r3, #1
 800041c:	2300      	movne	r3, #0
 800041e:	b2db      	uxtb	r3, r3
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	430b      	orrs	r3, r1
 800044c:	4909      	ldr	r1, [pc, #36]	; (8000474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800044e:	4313      	orrs	r3, r2
 8000450:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000456:	f023 020f 	bic.w	r2, r3, #15
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f003 030f 	and.w	r3, r3, #15
 8000460:	4904      	ldr	r1, [pc, #16]	; (8000474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000462:	4313      	orrs	r3, r2
 8000464:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000

08000478 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000482:	69da      	ldr	r2, [r3, #28]
 8000484:	4907      	ldr	r1, [pc, #28]	; (80004a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800048e:	69da      	ldr	r2, [r3, #28]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	4907      	ldr	r1, [pc, #28]	; (80004d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004be:	699a      	ldr	r2, [r3, #24]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000

080004d8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <LL_FLASH_SetLatency+0x24>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f023 0207 	bic.w	r2, r3, #7
 80004e8:	4904      	ldr	r1, [pc, #16]	; (80004fc <LL_FLASH_SetLatency+0x24>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	600b      	str	r3, [r1, #0]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40022000 	.word	0x40022000

08000500 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <LL_FLASH_GetLatency+0x18>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 0307 	and.w	r3, r3, #7
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40022000 	.word	0x40022000

0800051c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000528:	78fb      	ldrb	r3, [r7, #3]
 800052a:	b29a      	uxth	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <LL_GPIO_ReadOutputPort>:
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	695b      	ldr	r3, [r3, #20]
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <LL_GPIO_SetOutputPin>:
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	619a      	str	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <LL_GPIO_ResetOutputPin>:
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	RXDataIndexer = RX_UART_DATA_None;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <main+0x60>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000596:	2001      	movs	r0, #1
 8000598:	f7ff ff86 	bl	80004a8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800059c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80005a0:	f7ff ff6a 	bl	8000478 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f7ff fe65 	bl	8000274 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f82b 	bl	8000604 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f7ff fe31 	bl	8000214 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 fab1 	bl	8000b18 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	USART2_RegisterCallback(USART_ProcessRxData);
 80005b6:	480e      	ldr	r0, [pc, #56]	; (80005f0 <main+0x64>)
 80005b8:	f000 fb16 	bl	8000be8 <USART2_RegisterCallback>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		if (LL_GPIO_ReadOutputPort(LED_GPIO_Port) & (1 << LED_Pin)) {
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x68>)
 80005be:	f7ff ffbd 	bl	800053c <LL_GPIO_ReadOutputPort>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d005      	beq.n	80005d8 <main+0x4c>
			USART2_TransmitData(USART2,(uint8_t *)LED_ON_STR,LED_ON_STR_LEN);
 80005cc:	2207      	movs	r2, #7
 80005ce:	490a      	ldr	r1, [pc, #40]	; (80005f8 <main+0x6c>)
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <main+0x70>)
 80005d2:	f000 f8eb 	bl	80007ac <USART2_TransmitData>
 80005d6:	e004      	b.n	80005e2 <main+0x56>
		} else {
			USART2_TransmitData(USART2,(uint8_t *)LED_OFF_STR,LED_OFF_STR_LEN);
 80005d8:	2208      	movs	r2, #8
 80005da:	4909      	ldr	r1, [pc, #36]	; (8000600 <main+0x74>)
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <main+0x70>)
 80005de:	f000 f8e5 	bl	80007ac <USART2_TransmitData>
		}
		LL_mDelay(5000);
 80005e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80005e6:	f000 ff6d 	bl	80014c4 <LL_mDelay>
		if (LL_GPIO_ReadOutputPort(LED_GPIO_Port) & (1 << LED_Pin)) {
 80005ea:	e7e7      	b.n	80005bc <main+0x30>
 80005ec:	20000024 	.word	0x20000024
 80005f0:	08000685 	.word	0x08000685
 80005f4:	48000400 	.word	0x48000400
 80005f8:	08001590 	.word	0x08001590
 80005fc:	40004400 	.word	0x40004400
 8000600:	08001598 	.word	0x08001598

08000604 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff ff65 	bl	80004d8 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 800060e:	bf00      	nop
 8000610:	f7ff ff76 	bl	8000500 <LL_FLASH_GetLatency>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1fa      	bne.n	8000610 <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 800061a:	f7ff fe4f 	bl	80002bc <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 800061e:	bf00      	nop
 8000620:	f7ff fe5c 	bl	80002dc <LL_RCC_HSI_IsReady>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d1fa      	bne.n	8000620 <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 800062a:	2010      	movs	r0, #16
 800062c:	f7ff fe68 	bl	8000300 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_5);
 8000630:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff fefb 	bl	8000430 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 800063a:	f7ff fed5 	bl	80003e8 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 800063e:	bf00      	nop
 8000640:	f7ff fee2 	bl	8000408 <LL_RCC_PLL_IsReady>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d1fa      	bne.n	8000640 <SystemClock_Config+0x3c>

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff fe90 	bl	8000370 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff fea1 	bl	8000398 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff feb2 	bl	80003c0 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800065c:	2002      	movs	r0, #2
 800065e:	f7ff fe65 	bl	800032c <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8000662:	bf00      	nop
 8000664:	f7ff fe76 	bl	8000354 <LL_RCC_GetSysClkSource>
 8000668:	4603      	mov	r3, r0
 800066a:	2b08      	cmp	r3, #8
 800066c:	d1fa      	bne.n	8000664 <SystemClock_Config+0x60>

	}
	LL_Init1msTick(20000000);
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <SystemClock_Config+0x7c>)
 8000670:	f000 ff1a 	bl	80014a8 <LL_Init1msTick>
	LL_SetSystemCoreClock(20000000);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <SystemClock_Config+0x7c>)
 8000676:	f000 ff4b 	bl	8001510 <LL_SetSystemCoreClock>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	01312d00 	.word	0x01312d00

08000684 <USART_ProcessRxData>:

/* USER CODE BEGIN 4 */
void USART_ProcessRxData(uint8_t chr) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	switch (RXDataIndexer) {
 800068e:	4b45      	ldr	r3, [pc, #276]	; (80007a4 <USART_ProcessRxData+0x120>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3b01      	subs	r3, #1
 8000694:	2b06      	cmp	r3, #6
 8000696:	d811      	bhi.n	80006bc <USART_ProcessRxData+0x38>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <USART_ProcessRxData+0x1c>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	080006cb 	.word	0x080006cb
 80006a4:	080006e7 	.word	0x080006e7
 80006a8:	08000703 	.word	0x08000703
 80006ac:	0800071f 	.word	0x0800071f
 80006b0:	08000749 	.word	0x08000749
 80006b4:	08000759 	.word	0x08000759
 80006b8:	08000775 	.word	0x08000775
	default:
		if (chr == 'l')
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b6c      	cmp	r3, #108	; 0x6c
 80006c0:	d160      	bne.n	8000784 <USART_ProcessRxData+0x100>
			RXDataIndexer = RX_UART_DATA_l;
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <USART_ProcessRxData+0x120>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	701a      	strb	r2, [r3, #0]
		break;
 80006c8:	e05c      	b.n	8000784 <USART_ProcessRxData+0x100>
	case RX_UART_DATA_l:
		if (chr == 'e')
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b65      	cmp	r3, #101	; 0x65
 80006ce:	d103      	bne.n	80006d8 <USART_ProcessRxData+0x54>
			RXDataIndexer = RX_UART_DATA_le;
 80006d0:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <USART_ProcessRxData+0x120>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	701a      	strb	r2, [r3, #0]
		else if (chr != ENTER)
			RXDataIndexer = RX_UART_DATA_None;
		break;
 80006d6:	e057      	b.n	8000788 <USART_ProcessRxData+0x104>
		else if (chr != ENTER)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b0d      	cmp	r3, #13
 80006dc:	d054      	beq.n	8000788 <USART_ProcessRxData+0x104>
			RXDataIndexer = RX_UART_DATA_None;
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <USART_ProcessRxData+0x120>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
		break;
 80006e4:	e050      	b.n	8000788 <USART_ProcessRxData+0x104>
	case RX_UART_DATA_le:
		if (chr == 'd')
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b64      	cmp	r3, #100	; 0x64
 80006ea:	d103      	bne.n	80006f4 <USART_ProcessRxData+0x70>
			RXDataIndexer = RX_UART_DATA_led;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <USART_ProcessRxData+0x120>)
 80006ee:	2203      	movs	r2, #3
 80006f0:	701a      	strb	r2, [r3, #0]
		else if (chr != ENTER)
			RXDataIndexer = RX_UART_DATA_None;
		break;
 80006f2:	e04b      	b.n	800078c <USART_ProcessRxData+0x108>
		else if (chr != ENTER)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b0d      	cmp	r3, #13
 80006f8:	d048      	beq.n	800078c <USART_ProcessRxData+0x108>
			RXDataIndexer = RX_UART_DATA_None;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <USART_ProcessRxData+0x120>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
		break;
 8000700:	e044      	b.n	800078c <USART_ProcessRxData+0x108>
	case RX_UART_DATA_led:
		if (chr == 'O')
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b4f      	cmp	r3, #79	; 0x4f
 8000706:	d103      	bne.n	8000710 <USART_ProcessRxData+0x8c>
			RXDataIndexer = RX_UART_DATA_ledO;
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <USART_ProcessRxData+0x120>)
 800070a:	2204      	movs	r2, #4
 800070c:	701a      	strb	r2, [r3, #0]
		else if (chr != ENTER)
			RXDataIndexer = RX_UART_DATA_None;
		break;
 800070e:	e03f      	b.n	8000790 <USART_ProcessRxData+0x10c>
		else if (chr != ENTER)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	2b0d      	cmp	r3, #13
 8000714:	d03c      	beq.n	8000790 <USART_ProcessRxData+0x10c>
			RXDataIndexer = RX_UART_DATA_None;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <USART_ProcessRxData+0x120>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
		break;
 800071c:	e038      	b.n	8000790 <USART_ProcessRxData+0x10c>
	case RX_UART_DATA_ledO:
		if (chr == 'N')
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b4e      	cmp	r3, #78	; 0x4e
 8000722:	d103      	bne.n	800072c <USART_ProcessRxData+0xa8>
			RXDataIndexer = RX_UART_DATA_ledON;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <USART_ProcessRxData+0x120>)
 8000726:	2205      	movs	r2, #5
 8000728:	701a      	strb	r2, [r3, #0]
		else if (chr == 'F')
			RXDataIndexer = RX_UART_DATA_ledOF;
		else if (chr != ENTER)
			RXDataIndexer = RX_UART_DATA_None;
		break;
 800072a:	e033      	b.n	8000794 <USART_ProcessRxData+0x110>
		else if (chr == 'F')
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b46      	cmp	r3, #70	; 0x46
 8000730:	d103      	bne.n	800073a <USART_ProcessRxData+0xb6>
			RXDataIndexer = RX_UART_DATA_ledOF;
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <USART_ProcessRxData+0x120>)
 8000734:	2206      	movs	r2, #6
 8000736:	701a      	strb	r2, [r3, #0]
		break;
 8000738:	e02c      	b.n	8000794 <USART_ProcessRxData+0x110>
		else if (chr != ENTER)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b0d      	cmp	r3, #13
 800073e:	d029      	beq.n	8000794 <USART_ProcessRxData+0x110>
			RXDataIndexer = RX_UART_DATA_None;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <USART_ProcessRxData+0x120>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
		break;
 8000746:	e025      	b.n	8000794 <USART_ProcessRxData+0x110>
	case RX_UART_DATA_ledON:
		LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
 8000748:	2108      	movs	r1, #8
 800074a:	4817      	ldr	r0, [pc, #92]	; (80007a8 <USART_ProcessRxData+0x124>)
 800074c:	f7ff ff02 	bl	8000554 <LL_GPIO_SetOutputPin>
		RXDataIndexer = RX_UART_DATA_None;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <USART_ProcessRxData+0x120>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
		break;
 8000756:	e020      	b.n	800079a <USART_ProcessRxData+0x116>
	case RX_UART_DATA_ledOF:
		if (chr == 'F')
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	2b46      	cmp	r3, #70	; 0x46
 800075c:	d103      	bne.n	8000766 <USART_ProcessRxData+0xe2>
			RXDataIndexer = RX_UART_DATA_ledOFF;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <USART_ProcessRxData+0x120>)
 8000760:	2207      	movs	r2, #7
 8000762:	701a      	strb	r2, [r3, #0]
		else if (chr != ENTER)
			RXDataIndexer = RX_UART_DATA_None;
		break;
 8000764:	e018      	b.n	8000798 <USART_ProcessRxData+0x114>
		else if (chr != ENTER)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b0d      	cmp	r3, #13
 800076a:	d015      	beq.n	8000798 <USART_ProcessRxData+0x114>
			RXDataIndexer = RX_UART_DATA_None;
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <USART_ProcessRxData+0x120>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
		break;
 8000772:	e011      	b.n	8000798 <USART_ProcessRxData+0x114>
	case RX_UART_DATA_ledOFF:
		LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000774:	2108      	movs	r1, #8
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <USART_ProcessRxData+0x124>)
 8000778:	f7ff fefa 	bl	8000570 <LL_GPIO_ResetOutputPin>
		RXDataIndexer = RX_UART_DATA_None;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <USART_ProcessRxData+0x120>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
		break;
 8000782:	e00a      	b.n	800079a <USART_ProcessRxData+0x116>
		break;
 8000784:	bf00      	nop
 8000786:	e008      	b.n	800079a <USART_ProcessRxData+0x116>
		break;
 8000788:	bf00      	nop
 800078a:	e006      	b.n	800079a <USART_ProcessRxData+0x116>
		break;
 800078c:	bf00      	nop
 800078e:	e004      	b.n	800079a <USART_ProcessRxData+0x116>
		break;
 8000790:	bf00      	nop
 8000792:	e002      	b.n	800079a <USART_ProcessRxData+0x116>
		break;
 8000794:	bf00      	nop
 8000796:	e000      	b.n	800079a <USART_ProcessRxData+0x116>
		break;
 8000798:	bf00      	nop

	}
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000024 	.word	0x20000024
 80007a8:	48000400 	.word	0x48000400

080007ac <USART2_TransmitData>:
void USART2_TransmitData(USART_TypeDef *USARTx, uint8_t ptr[], uint16_t lenght) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	4613      	mov	r3, r2
 80007b8:	80fb      	strh	r3, [r7, #6]
	if (ptr != NULL) {
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d011      	beq.n	80007e4 <USART2_TransmitData+0x38>
		for (uint16_t i = 0; i < lenght; i++) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	82fb      	strh	r3, [r7, #22]
 80007c4:	e00a      	b.n	80007dc <USART2_TransmitData+0x30>
			LL_USART_TransmitData8(USARTx, ptr[i]);
 80007c6:	8afb      	ldrh	r3, [r7, #22]
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	68f8      	ldr	r0, [r7, #12]
 80007d2:	f7ff fea3 	bl	800051c <LL_USART_TransmitData8>
		for (uint16_t i = 0; i < lenght; i++) {
 80007d6:	8afb      	ldrh	r3, [r7, #22]
 80007d8:	3301      	adds	r3, #1
 80007da:	82fb      	strh	r3, [r7, #22]
 80007dc:	8afa      	ldrh	r2, [r7, #22]
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3f0      	bcc.n	80007c6 <USART2_TransmitData+0x1a>
		}
	}
}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <LL_USART_IsActiveFlag_RXNE>:
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	f003 0320 	and.w	r3, r3, #32
 80007fc:	2b20      	cmp	r3, #32
 80007fe:	d101      	bne.n	8000804 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000800:	2301      	movs	r3, #1
 8000802:	e000      	b.n	8000806 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <LL_USART_ReceiveData8>:
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2db      	uxtb	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000832:	e7fe      	b.n	8000832 <NMI_Handler+0x4>

08000834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <HardFault_Handler+0x4>

0800083a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <BusFault_Handler+0x4>

08000846 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <USART2_IRQHandler+0x24>)
 800088a:	f7ff ffaf 	bl	80007ec <LL_USART_IsActiveFlag_RXNE>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d006      	beq.n	80008a2 <USART2_IRQHandler+0x1e>
		USART2_HandlerRx(LL_USART_ReceiveData8(USART2));
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <USART2_IRQHandler+0x24>)
 8000896:	f7ff ffbc 	bl	8000812 <LL_USART_ReceiveData8>
 800089a:	4603      	mov	r3, r0
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f9b3 	bl	8000c08 <USART2_HandlerRx>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40004400 	.word	0x40004400

080008ac <SystemInit>:
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4907      	ldr	r1, [pc, #28]	; (8000924 <__NVIC_EnableIRQ+0x38>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	; (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	; (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	; 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <LL_AHB1_GRP1_EnableClock>:
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009fa:	695a      	ldr	r2, [r3, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4013      	ands	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	40021000 	.word	0x40021000

08000a14 <LL_APB1_GRP1_EnableClock>:
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a1e:	69da      	ldr	r2, [r3, #28]
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a2a:	69da      	ldr	r2, [r3, #28]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	40021000 	.word	0x40021000

08000a44 <LL_USART_Enable>:
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f043 0201 	orr.w	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <LL_USART_ConfigAsyncMode>:
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	609a      	str	r2, [r3, #8]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <LL_USART_EnableIT_RXNE>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	b089      	sub	sp, #36	; 0x24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	e853 3f00 	ldrex	r3, [r3]
 8000aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	f043 0320 	orr.w	r3, r3, #32
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	61ba      	str	r2, [r7, #24]
 8000ab2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ab4:	6979      	ldr	r1, [r7, #20]
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	e841 2300 	strex	r3, r2, [r1]
 8000abc:	613b      	str	r3, [r7, #16]
   return(result);
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1e9      	bne.n	8000a98 <LL_USART_EnableIT_RXNE+0x8>
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <LL_USART_DisableIT_CTS>:
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b089      	sub	sp, #36	; 0x24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3308      	adds	r3, #8
 8000ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	e853 3f00 	ldrex	r3, [r3]
 8000ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3308      	adds	r3, #8
 8000af4:	69fa      	ldr	r2, [r7, #28]
 8000af6:	61ba      	str	r2, [r7, #24]
 8000af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000afa:	6979      	ldr	r1, [r7, #20]
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	e841 2300 	strex	r3, r2, [r1]
 8000b02:	613b      	str	r3, [r7, #16]
   return(result);
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1e7      	bne.n	8000ada <LL_USART_DisableIT_CTS+0x8>
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3724      	adds	r7, #36	; 0x24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b42:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b46:	f7ff ff65 	bl	8000a14 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b4a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b4e:	f7ff ff49 	bl	80009e4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b52:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f000 f98a 	bl	8000e8c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000b78:	f7ff feaa 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fefa 	bl	800097c <NVIC_EncodePriority>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	2026      	movs	r0, #38	; 0x26
 8000b8e:	f7ff fecb 	bl	8000928 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b92:	2026      	movs	r0, #38	; 0x26
 8000b94:	f7ff feaa 	bl	80008ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000b98:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000b9c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000baa:	230c      	movs	r3, #12
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <MX_USART2_UART_Init+0xcc>)
 8000bbe:	f000 fbed 	bl	800139c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <MX_USART2_UART_Init+0xcc>)
 8000bc4:	f7ff ff85 	bl	8000ad2 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_USART2_UART_Init+0xcc>)
 8000bca:	f7ff ff4b 	bl	8000a64 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART2_UART_Init+0xcc>)
 8000bd0:	f7ff ff38 	bl	8000a44 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
	LL_USART_EnableIT_RXNE(USART2);
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <MX_USART2_UART_Init+0xcc>)
 8000bd6:	f7ff ff5b 	bl	8000a90 <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3738      	adds	r7, #56	; 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40004400 	.word	0x40004400

08000be8 <USART2_RegisterCallback>:

/* USER CODE BEGIN 1 */
void USART2_RegisterCallback(void *callback) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	USART2_Call_Back = callback;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <USART2_RegisterCallback+0x1c>)
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000020 	.word	0x20000020

08000c08 <USART2_HandlerRx>:

void USART2_HandlerRx(uint8_t chr) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	if (USART2_Call_Back != 0) {
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <USART2_HandlerRx+0x24>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <USART2_HandlerRx+0x1c>
		USART2_Call_Back(chr);
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <USART2_HandlerRx+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	79fa      	ldrb	r2, [r7, #7]
 8000c20:	4610      	mov	r0, r2
 8000c22:	4798      	blx	r3
	}
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000020 	.word	0x20000020

08000c30 <Reset_Handler>:
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopForever+0x2>
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <LoopForever+0x6>)
 8000c36:	490e      	ldr	r1, [pc, #56]	; (8000c70 <LoopForever+0xa>)
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <LoopForever+0xe>)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:
 8000c3e:	58d4      	ldr	r4, [r2, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:
 8000c44:	18c4      	adds	r4, r0, r3
 8000c46:	428c      	cmp	r4, r1
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopForever+0x12>)
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	; (8000c7c <LoopForever+0x16>)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:
 8000c56:	42a2      	cmp	r2, r4
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>
 8000c5a:	f7ff fe27 	bl	80008ac <SystemInit>
 8000c5e:	f000 fc67 	bl	8001530 <__libc_init_array>
 8000c62:	f7ff fc93 	bl	800058c <main>

08000c66 <LoopForever>:
 8000c66:	e7fe      	b.n	8000c66 <LoopForever>
 8000c68:	20003000 	.word	0x20003000
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004
 8000c74:	080015c0 	.word	0x080015c0
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	20000028 	.word	0x20000028

08000c80 <ADC1_2_IRQHandler>:
 8000c80:	e7fe      	b.n	8000c80 <ADC1_2_IRQHandler>

08000c82 <LL_GPIO_SetPinMode>:
 8000c82:	b480      	push	{r7}
 8000c84:	b089      	sub	sp, #36	; 0x24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2103      	movs	r1, #3
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa93 f3a3 	rbit	r3, r3
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	fab3 f383 	clz	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	bf00      	nop
 8000cd6:	3724      	adds	r7, #36	; 0x24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_GPIO_SetPinOutputType>:
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	fb01 f303 	mul.w	r3, r1, r3
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_GPIO_SetPinSpeed>:
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2103      	movs	r1, #3
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fab3 f383 	clz	r3, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	bf00      	nop
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <LL_GPIO_SetPinPull>:
 8000d6e:	b480      	push	{r7}
 8000d70:	b089      	sub	sp, #36	; 0x24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	fab3 f383 	clz	r3, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2103      	movs	r1, #3
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa93 f3a3 	rbit	r3, r3
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	fab3 f383 	clz	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	bf00      	nop
 8000dc2:	3724      	adds	r7, #36	; 0x24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_GPIO_SetAFPin_0_7>:
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6a1a      	ldr	r2, [r3, #32]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	fab3 f383 	clz	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	210f      	movs	r1, #15
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	621a      	str	r2, [r3, #32]
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	; 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_GPIO_SetAFPin_8_15>:
 8000e2a:	b480      	push	{r7}
 8000e2c:	b089      	sub	sp, #36	; 0x24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	fab3 f383 	clz	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	210f      	movs	r1, #15
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	0a1b      	lsrs	r3, r3, #8
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa93 f3a3 	rbit	r3, r3
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	fab3 f383 	clz	r3, r3
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
 8000e80:	bf00      	nop
 8000e82:	3724      	adds	r7, #36	; 0x24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_GPIO_Init>:
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e051      	b.n	8000f54 <LL_GPIO_Init+0xc8>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d043      	beq.n	8000f4e <LL_GPIO_Init+0xc2>
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d003      	beq.n	8000ed6 <LL_GPIO_Init+0x4a>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d10e      	bne.n	8000ef4 <LL_GPIO_Init+0x68>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	461a      	mov	r2, r3
 8000edc:	69b9      	ldr	r1, [r7, #24]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff16 	bl	8000d10 <LL_GPIO_SetPinSpeed>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	461a      	mov	r2, r3
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fef6 	bl	8000ce0 <LL_GPIO_SetPinOutputType>
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	69b9      	ldr	r1, [r7, #24]
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff36 	bl	8000d6e <LL_GPIO_SetPinPull>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d11a      	bne.n	8000f40 <LL_GPIO_Init+0xb4>
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	fab3 f383 	clz	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d807      	bhi.n	8000f32 <LL_GPIO_Init+0xa6>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	461a      	mov	r2, r3
 8000f28:	69b9      	ldr	r1, [r7, #24]
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff4e 	bl	8000dcc <LL_GPIO_SetAFPin_0_7>
 8000f30:	e006      	b.n	8000f40 <LL_GPIO_Init+0xb4>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	461a      	mov	r2, r3
 8000f38:	69b9      	ldr	r1, [r7, #24]
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff75 	bl	8000e2a <LL_GPIO_SetAFPin_8_15>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	461a      	mov	r2, r3
 8000f46:	69b9      	ldr	r1, [r7, #24]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fe9a 	bl	8000c82 <LL_GPIO_SetPinMode>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3301      	adds	r3, #1
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1a6      	bne.n	8000eb0 <LL_GPIO_Init+0x24>
 8000f62:	2300      	movs	r3, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <LL_RCC_HSI_IsReady>:
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <LL_RCC_HSI_IsReady+0x20>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	bf0c      	ite	eq
 8000f7c:	2301      	moveq	r3, #1
 8000f7e:	2300      	movne	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_RCC_LSE_IsReady>:
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <LL_RCC_LSE_IsReady+0x20>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2301      	moveq	r3, #1
 8000fa2:	2300      	movne	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_RCC_GetSysClkSource>:
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <LL_RCC_GetSysClkSource+0x18>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <LL_RCC_GetAHBPrescaler>:
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <LL_RCC_GetAHBPrescaler+0x18>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <LL_RCC_GetAPB1Prescaler>:
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000

08001008 <LL_RCC_GetAPB2Prescaler>:
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <LL_RCC_GetAPB2Prescaler+0x18>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <LL_RCC_GetUSARTClockSource>:
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <LL_RCC_GetUSARTClockSource+0x28>)
 800102e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001030:	2103      	movs	r1, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	401a      	ands	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	061b      	lsls	r3, r3, #24
 800103e:	4313      	orrs	r3, r2
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000

08001050 <LL_RCC_PLL_GetMainSource>:
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <LL_RCC_PLL_GetMainSource+0x18>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <LL_RCC_PLL_GetMultiplicator>:
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40021000 	.word	0x40021000

08001088 <LL_RCC_PLL_GetPrediv>:
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <LL_RCC_PLL_GetPrediv+0x18>)
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <LL_RCC_GetSystemClocksFreq>:
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	f000 f864 	bl	8001178 <RCC_GetSystemClockFreq>
 80010b0:	4602      	mov	r2, r0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f882 	bl	80011c4 <RCC_GetHCLKClockFreq>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f890 	bl	80011f0 <RCC_GetPCLK1ClockFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f89c 	bl	8001218 <RCC_GetPCLK2ClockFreq>
 80010e0:	4602      	mov	r2, r0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <LL_RCC_GetUSARTClockFreq>:
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d12d      	bne.n	800115e <LL_RCC_GetUSARTClockFreq+0x6e>
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff8e 	bl	8001024 <LL_RCC_GetUSARTClockSource>
 8001108:	4603      	mov	r3, r0
 800110a:	2b03      	cmp	r3, #3
 800110c:	d00a      	beq.n	8001124 <LL_RCC_GetUSARTClockFreq+0x34>
 800110e:	2b03      	cmp	r3, #3
 8001110:	d819      	bhi.n	8001146 <LL_RCC_GetUSARTClockFreq+0x56>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d002      	beq.n	800111c <LL_RCC_GetUSARTClockFreq+0x2c>
 8001116:	2b02      	cmp	r3, #2
 8001118:	d00c      	beq.n	8001134 <LL_RCC_GetUSARTClockFreq+0x44>
 800111a:	e014      	b.n	8001146 <LL_RCC_GetUSARTClockFreq+0x56>
 800111c:	f000 f82c 	bl	8001178 <RCC_GetSystemClockFreq>
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	e021      	b.n	8001168 <LL_RCC_GetUSARTClockFreq+0x78>
 8001124:	f7ff ff22 	bl	8000f6c <LL_RCC_HSI_IsReady>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d019      	beq.n	8001162 <LL_RCC_GetUSARTClockFreq+0x72>
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e016      	b.n	8001162 <LL_RCC_GetUSARTClockFreq+0x72>
 8001134:	f7ff ff2c 	bl	8000f90 <LL_RCC_LSE_IsReady>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d013      	beq.n	8001166 <LL_RCC_GetUSARTClockFreq+0x76>
 800113e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e00f      	b.n	8001166 <LL_RCC_GetUSARTClockFreq+0x76>
 8001146:	f000 f817 	bl	8001178 <RCC_GetSystemClockFreq>
 800114a:	4603      	mov	r3, r0
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f839 	bl	80011c4 <RCC_GetHCLKClockFreq>
 8001152:	4603      	mov	r3, r0
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f84b 	bl	80011f0 <RCC_GetPCLK1ClockFreq>
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	e004      	b.n	8001168 <LL_RCC_GetUSARTClockFreq+0x78>
 800115e:	bf00      	nop
 8001160:	e002      	b.n	8001168 <LL_RCC_GetUSARTClockFreq+0x78>
 8001162:	bf00      	nop
 8001164:	e000      	b.n	8001168 <LL_RCC_GetUSARTClockFreq+0x78>
 8001166:	bf00      	nop
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	007a1200 	.word	0x007a1200

08001178 <RCC_GetSystemClockFreq>:
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	f7ff ff17 	bl	8000fb4 <LL_RCC_GetSysClkSource>
 8001186:	4603      	mov	r3, r0
 8001188:	2b08      	cmp	r3, #8
 800118a:	d00c      	beq.n	80011a6 <RCC_GetSystemClockFreq+0x2e>
 800118c:	2b08      	cmp	r3, #8
 800118e:	d80e      	bhi.n	80011ae <RCC_GetSystemClockFreq+0x36>
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <RCC_GetSystemClockFreq+0x22>
 8001194:	2b04      	cmp	r3, #4
 8001196:	d003      	beq.n	80011a0 <RCC_GetSystemClockFreq+0x28>
 8001198:	e009      	b.n	80011ae <RCC_GetSystemClockFreq+0x36>
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <RCC_GetSystemClockFreq+0x48>)
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e009      	b.n	80011b4 <RCC_GetSystemClockFreq+0x3c>
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <RCC_GetSystemClockFreq+0x48>)
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	e006      	b.n	80011b4 <RCC_GetSystemClockFreq+0x3c>
 80011a6:	f000 f84b 	bl	8001240 <RCC_PLL_GetFreqDomain_SYS>
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	e002      	b.n	80011b4 <RCC_GetSystemClockFreq+0x3c>
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <RCC_GetSystemClockFreq+0x48>)
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	bf00      	nop
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	007a1200 	.word	0x007a1200

080011c4 <RCC_GetHCLKClockFreq>:
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	f7ff ff00 	bl	8000fd0 <LL_RCC_GetAHBPrescaler>
 80011d0:	4603      	mov	r3, r0
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <RCC_GetHCLKClockFreq+0x28>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	40d3      	lsrs	r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	080015a0 	.word	0x080015a0

080011f0 <RCC_GetPCLK1ClockFreq>:
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	f7ff fef8 	bl	8000fec <LL_RCC_GetAPB1Prescaler>
 80011fc:	4603      	mov	r3, r0
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <RCC_GetPCLK1ClockFreq+0x24>)
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	40d3      	lsrs	r3, r2
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	080015b0 	.word	0x080015b0

08001218 <RCC_GetPCLK2ClockFreq>:
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	f7ff fef2 	bl	8001008 <LL_RCC_GetAPB2Prescaler>
 8001224:	4603      	mov	r3, r0
 8001226:	0adb      	lsrs	r3, r3, #11
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <RCC_GetPCLK2ClockFreq+0x24>)
 800122a:	5cd3      	ldrb	r3, [r2, r3]
 800122c:	461a      	mov	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	40d3      	lsrs	r3, r2
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	080015b0 	.word	0x080015b0

08001240 <RCC_PLL_GetFreqDomain_SYS>:
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	f7ff feff 	bl	8001050 <LL_RCC_PLL_GetMainSource>
 8001252:	60b8      	str	r0, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d003      	beq.n	800126a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001262:	e005      	b.n	8001270 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e005      	b.n	8001276 <RCC_PLL_GetFreqDomain_SYS+0x36>
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e002      	b.n	8001276 <RCC_PLL_GetFreqDomain_SYS+0x36>
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	bf00      	nop
 8001276:	f7ff ff07 	bl	8001088 <LL_RCC_PLL_GetPrediv>
 800127a:	4603      	mov	r3, r0
 800127c:	3301      	adds	r3, #1
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	fbb2 f4f3 	udiv	r4, r2, r3
 8001284:	f7ff fef2 	bl	800106c <LL_RCC_PLL_GetMultiplicator>
 8001288:	4603      	mov	r3, r0
 800128a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800128e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	fa92 f2a2 	rbit	r2, r2
 800129a:	603a      	str	r2, [r7, #0]
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	fab2 f282 	clz	r2, r2
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	40d3      	lsrs	r3, r2
 80012a6:	3302      	adds	r3, #2
 80012a8:	fb03 f304 	mul.w	r3, r3, r4
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	003d0900 	.word	0x003d0900
 80012b8:	007a1200 	.word	0x007a1200

080012bc <LL_USART_IsEnabled>:
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <LL_USART_IsEnabled+0x18>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <LL_USART_IsEnabled+0x1a>
 80012d4:	2300      	movs	r3, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <LL_USART_SetStopBitsLength>:
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_USART_SetHWFlowCtrl>:
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_USART_SetBaudRate>:
 800132e:	b480      	push	{r7}
 8001330:	b087      	sub	sp, #28
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001342:	d11a      	bne.n	800137a <LL_USART_SetBaudRate+0x4c>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	005a      	lsls	r2, r3, #1
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	441a      	add	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	b29b      	uxth	r3, r3
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	b29b      	uxth	r3, r3
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	e00a      	b.n	8001390 <LL_USART_SetBaudRate+0x62>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	085a      	lsrs	r2, r3, #1
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	441a      	add	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_USART_Init>:
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	77fb      	strb	r3, [r7, #31]
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ff84 	bl	80012bc <LL_USART_IsEnabled>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d14e      	bne.n	8001458 <LL_USART_Init+0xbc>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <LL_USART_Init+0xc8>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	6851      	ldr	r1, [r2, #4]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	68d2      	ldr	r2, [r2, #12]
 80013ca:	4311      	orrs	r1, r2
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	6912      	ldr	r2, [r2, #16]
 80013d0:	4311      	orrs	r1, r2
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	6992      	ldr	r2, [r2, #24]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff7c 	bl	80012e2 <LL_USART_SetStopBitsLength>
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff89 	bl	8001308 <LL_USART_SetHWFlowCtrl>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <LL_USART_Init+0xcc>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d104      	bne.n	8001408 <LL_USART_Init+0x6c>
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fe76 	bl	80010f0 <LL_RCC_GetUSARTClockFreq>
 8001404:	61b8      	str	r0, [r7, #24]
 8001406:	e016      	b.n	8001436 <LL_USART_Init+0x9a>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <LL_USART_Init+0xd0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d107      	bne.n	8001420 <LL_USART_Init+0x84>
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe45 	bl	80010a4 <LL_RCC_GetSystemClocksFreq>
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	e00a      	b.n	8001436 <LL_USART_Init+0x9a>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <LL_USART_Init+0xd4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d106      	bne.n	8001436 <LL_USART_Init+0x9a>
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe39 	bl	80010a4 <LL_RCC_GetSystemClocksFreq>
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00d      	beq.n	8001458 <LL_USART_Init+0xbc>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d009      	beq.n	8001458 <LL_USART_Init+0xbc>
 8001444:	2300      	movs	r3, #0
 8001446:	77fb      	strb	r3, [r7, #31]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	699a      	ldr	r2, [r3, #24]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	69b9      	ldr	r1, [r7, #24]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff6b 	bl	800132e <LL_USART_SetBaudRate>
 8001458:	7ffb      	ldrb	r3, [r7, #31]
 800145a:	4618      	mov	r0, r3
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	efff69f3 	.word	0xefff69f3
 8001468:	40013800 	.word	0x40013800
 800146c:	40004400 	.word	0x40004400
 8001470:	40004800 	.word	0x40004800

08001474 <LL_InitTick>:
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <LL_InitTick+0x30>)
 8001488:	3b01      	subs	r3, #1
 800148a:	6053      	str	r3, [r2, #4]
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <LL_InitTick+0x30>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <LL_InitTick+0x30>)
 8001494:	2205      	movs	r2, #5
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <LL_Init1msTick>:
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffdd 	bl	8001474 <LL_InitTick>
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <LL_mDelay>:
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <LL_mDelay+0x48>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014da:	d00c      	beq.n	80014f6 <LL_mDelay+0x32>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	e008      	b.n	80014f6 <LL_mDelay+0x32>
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <LL_mDelay+0x48>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <LL_mDelay+0x32>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f3      	bne.n	80014e4 <LL_mDelay+0x20>
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <LL_SetSystemCoreClock>:
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <LL_SetSystemCoreClock+0x1c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000

08001530 <__libc_init_array>:
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	4d0d      	ldr	r5, [pc, #52]	; (8001568 <__libc_init_array+0x38>)
 8001534:	4c0d      	ldr	r4, [pc, #52]	; (800156c <__libc_init_array+0x3c>)
 8001536:	1b64      	subs	r4, r4, r5
 8001538:	10a4      	asrs	r4, r4, #2
 800153a:	2600      	movs	r6, #0
 800153c:	42a6      	cmp	r6, r4
 800153e:	d109      	bne.n	8001554 <__libc_init_array+0x24>
 8001540:	4d0b      	ldr	r5, [pc, #44]	; (8001570 <__libc_init_array+0x40>)
 8001542:	4c0c      	ldr	r4, [pc, #48]	; (8001574 <__libc_init_array+0x44>)
 8001544:	f000 f818 	bl	8001578 <_init>
 8001548:	1b64      	subs	r4, r4, r5
 800154a:	10a4      	asrs	r4, r4, #2
 800154c:	2600      	movs	r6, #0
 800154e:	42a6      	cmp	r6, r4
 8001550:	d105      	bne.n	800155e <__libc_init_array+0x2e>
 8001552:	bd70      	pop	{r4, r5, r6, pc}
 8001554:	f855 3b04 	ldr.w	r3, [r5], #4
 8001558:	4798      	blx	r3
 800155a:	3601      	adds	r6, #1
 800155c:	e7ee      	b.n	800153c <__libc_init_array+0xc>
 800155e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001562:	4798      	blx	r3
 8001564:	3601      	adds	r6, #1
 8001566:	e7f2      	b.n	800154e <__libc_init_array+0x1e>
 8001568:	080015b8 	.word	0x080015b8
 800156c:	080015b8 	.word	0x080015b8
 8001570:	080015b8 	.word	0x080015b8
 8001574:	080015bc 	.word	0x080015bc

08001578 <_init>:
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	bf00      	nop
 800157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157e:	bc08      	pop	{r3}
 8001580:	469e      	mov	lr, r3
 8001582:	4770      	bx	lr

08001584 <_fini>:
 8001584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001586:	bf00      	nop
 8001588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158a:	bc08      	pop	{r3}
 800158c:	469e      	mov	lr, r3
 800158e:	4770      	bx	lr
