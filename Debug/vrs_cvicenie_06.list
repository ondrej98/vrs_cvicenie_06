
vrs_cvicenie_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001308  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001490  08001490  00011490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014a8  080014a8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080014a8  080014a8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014a8  080014a8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014a8  080014a8  000114a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014ac  080014ac  000114ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080014b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000049f7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013a4  00000000  00000000  00024a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  00025dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000498  00000000  00000000  00026300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000159b8  00000000  00000000  00026798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000447f  00000000  00000000  0003c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072dfa  00000000  00000000  000405cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000b33c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013a8  00000000  00000000  000b341c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001478 	.word	0x08001478

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001478 	.word	0x08001478

080001c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d2:	695a      	ldr	r2, [r3, #20]
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	695a      	ldr	r2, [r3, #20]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	463b      	mov	r3, r7
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800022a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800022e:	f7ff ffcb 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000232:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000236:	f7ff ffc7 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800023a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800023e:	f7ff ffc3 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000242:	2108      	movs	r1, #8
 8000244:	480a      	ldr	r0, [pc, #40]	; (8000270 <MX_GPIO_Init+0x5c>)
 8000246:	f7ff ffd7 	bl	80001f8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800024a:	2308      	movs	r3, #8
 800024c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800024e:	2301      	movs	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800025e:	463b      	mov	r3, r7
 8000260:	4619      	mov	r1, r3
 8000262:	4803      	ldr	r0, [pc, #12]	; (8000270 <MX_GPIO_Init+0x5c>)
 8000264:	f000 fdb8 	bl	8000dd8 <LL_GPIO_Init>

}
 8000268:	bf00      	nop
 800026a:	3718      	adds	r7, #24
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	48000400 	.word	0x48000400

08000274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f003 0307 	and.w	r3, r3, #7
 8000282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000290:	4013      	ands	r3, r2
 8000292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800029c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <__NVIC_SetPriorityGrouping+0x44>)
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	60d3      	str	r3, [r2, #12]
}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <LL_RCC_HSI_Enable+0x1c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <LL_RCC_HSI_Enable+0x1c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000

080002dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <LL_RCC_HSI_IsReady+0x20>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f003 0302 	and.w	r3, r3, #2
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	bf0c      	ite	eq
 80002ec:	2301      	moveq	r3, #1
 80002ee:	2300      	movne	r3, #0
 80002f0:	b2db      	uxtb	r3, r3
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000

08000300 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	00db      	lsls	r3, r3, #3
 8000314:	4904      	ldr	r1, [pc, #16]	; (8000328 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000316:	4313      	orrs	r3, r2
 8000318:	600b      	str	r3, [r1, #0]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000

0800032c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <LL_RCC_SetSysClkSource+0x24>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	f023 0203 	bic.w	r2, r3, #3
 800033c:	4904      	ldr	r1, [pc, #16]	; (8000350 <LL_RCC_SetSysClkSource+0x24>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4313      	orrs	r3, r2
 8000342:	604b      	str	r3, [r1, #4]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000358:	4b04      	ldr	r3, [pc, #16]	; (800036c <LL_RCC_GetSysClkSource+0x18>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f003 030c 	and.w	r3, r3, #12
}
 8000360:	4618      	mov	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <LL_RCC_SetAHBPrescaler+0x24>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <LL_RCC_SetAHBPrescaler+0x24>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	604b      	str	r3, [r1, #4]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80003a8:	4904      	ldr	r1, [pc, #16]	; (80003bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4313      	orrs	r3, r2
 80003ae:	604b      	str	r3, [r1, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003d0:	4904      	ldr	r1, [pc, #16]	; (80003e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	604b      	str	r3, [r1, #4]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <LL_RCC_PLL_Enable+0x1c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a04      	ldr	r2, [pc, #16]	; (8000404 <LL_RCC_PLL_Enable+0x1c>)
 80003f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <LL_RCC_PLL_IsReady+0x24>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000418:	bf0c      	ite	eq
 800041a:	2301      	moveq	r3, #1
 800041c:	2300      	movne	r3, #0
 800041e:	b2db      	uxtb	r3, r3
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	430b      	orrs	r3, r1
 800044c:	4909      	ldr	r1, [pc, #36]	; (8000474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800044e:	4313      	orrs	r3, r2
 8000450:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000456:	f023 020f 	bic.w	r2, r3, #15
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f003 030f 	and.w	r3, r3, #15
 8000460:	4904      	ldr	r1, [pc, #16]	; (8000474 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000462:	4313      	orrs	r3, r2
 8000464:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000

08000478 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000482:	69da      	ldr	r2, [r3, #28]
 8000484:	4907      	ldr	r1, [pc, #28]	; (80004a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4313      	orrs	r3, r2
 800048a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800048e:	69da      	ldr	r2, [r3, #28]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4013      	ands	r3, r2
 8000494:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b0:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b2:	699a      	ldr	r2, [r3, #24]
 80004b4:	4907      	ldr	r1, [pc, #28]	; (80004d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004be:	699a      	ldr	r2, [r3, #24]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40021000 	.word	0x40021000

080004d8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <LL_FLASH_SetLatency+0x24>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f023 0207 	bic.w	r2, r3, #7
 80004e8:	4904      	ldr	r1, [pc, #16]	; (80004fc <LL_FLASH_SetLatency+0x24>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	600b      	str	r3, [r1, #0]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40022000 	.word	0x40022000

08000500 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <LL_FLASH_GetLatency+0x18>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 0307 	and.w	r3, r3, #7
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40022000 	.word	0x40022000

0800051c <LL_GPIO_SetOutputPin>:
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	619a      	str	r2, [r3, #24]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <LL_GPIO_ResetOutputPin>:
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	USART2_DataBufferIndexer = RX_UART_DATA_None;
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x34>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800055e:	2001      	movs	r0, #1
 8000560:	f7ff ffa2 	bl	80004a8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000564:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000568:	f7ff ff86 	bl	8000478 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056c:	2003      	movs	r0, #3
 800056e:	f7ff fe81 	bl	8000274 <__NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000572:	f000 f80d 	bl	8000590 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000576:	f7ff fe4d 	bl	8000214 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800057a:	f000 fa73 	bl	8000a64 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	USART2_RegisterCallback(USART_ProcessRxData);
 800057e:	4803      	ldr	r0, [pc, #12]	; (800058c <main+0x38>)
 8000580:	f000 fad8 	bl	8000b34 <USART2_RegisterCallback>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000584:	e7fe      	b.n	8000584 <main+0x30>
 8000586:	bf00      	nop
 8000588:	20000024 	.word	0x20000024
 800058c:	08000611 	.word	0x08000611

08000590 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff ff9f 	bl	80004d8 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 800059a:	bf00      	nop
 800059c:	f7ff ffb0 	bl	8000500 <LL_FLASH_GetLatency>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d1fa      	bne.n	800059c <SystemClock_Config+0xc>
	}
	LL_RCC_HSI_Enable();
 80005a6:	f7ff fe89 	bl	80002bc <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 80005aa:	bf00      	nop
 80005ac:	f7ff fe96 	bl	80002dc <LL_RCC_HSI_IsReady>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d1fa      	bne.n	80005ac <SystemClock_Config+0x1c>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 80005b6:	2010      	movs	r0, #16
 80005b8:	f7ff fea2 	bl	8000300 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_5);
 80005bc:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
 80005c0:	2000      	movs	r0, #0
 80005c2:	f7ff ff35 	bl	8000430 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 80005c6:	f7ff ff0f 	bl	80003e8 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 80005ca:	bf00      	nop
 80005cc:	f7ff ff1c 	bl	8000408 <LL_RCC_PLL_IsReady>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d1fa      	bne.n	80005cc <SystemClock_Config+0x3c>

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff feca 	bl	8000370 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff fedb 	bl	8000398 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff feec 	bl	80003c0 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80005e8:	2002      	movs	r0, #2
 80005ea:	f7ff fe9f 	bl	800032c <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 80005ee:	bf00      	nop
 80005f0:	f7ff feb0 	bl	8000354 <LL_RCC_GetSysClkSource>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b08      	cmp	r3, #8
 80005f8:	d1fa      	bne.n	80005f0 <SystemClock_Config+0x60>

	}
	LL_Init1msTick(20000000);
 80005fa:	4804      	ldr	r0, [pc, #16]	; (800060c <SystemClock_Config+0x7c>)
 80005fc:	f000 fefa 	bl	80013f4 <LL_Init1msTick>
	LL_SetSystemCoreClock(20000000);
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <SystemClock_Config+0x7c>)
 8000602:	f000 ff05 	bl	8001410 <LL_SetSystemCoreClock>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	01312d00 	.word	0x01312d00

08000610 <USART_ProcessRxData>:

/* USER CODE BEGIN 4 */
void USART_ProcessRxData(uint8_t chr) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	switch (USART2_DataBufferIndexer) {
 800061a:	4b45      	ldr	r3, [pc, #276]	; (8000730 <USART_ProcessRxData+0x120>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	2b06      	cmp	r3, #6
 8000622:	d811      	bhi.n	8000648 <USART_ProcessRxData+0x38>
 8000624:	a201      	add	r2, pc, #4	; (adr r2, 800062c <USART_ProcessRxData+0x1c>)
 8000626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062a:	bf00      	nop
 800062c:	08000657 	.word	0x08000657
 8000630:	08000673 	.word	0x08000673
 8000634:	0800068f 	.word	0x0800068f
 8000638:	080006ab 	.word	0x080006ab
 800063c:	080006d5 	.word	0x080006d5
 8000640:	080006e5 	.word	0x080006e5
 8000644:	08000701 	.word	0x08000701
	default:
		if (chr == 'l')
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b6c      	cmp	r3, #108	; 0x6c
 800064c:	d160      	bne.n	8000710 <USART_ProcessRxData+0x100>
			USART2_DataBufferIndexer = RX_UART_DATA_l;
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <USART_ProcessRxData+0x120>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
		break;
 8000654:	e05c      	b.n	8000710 <USART_ProcessRxData+0x100>
	case RX_UART_DATA_l:
		if (chr == 'e')
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b65      	cmp	r3, #101	; 0x65
 800065a:	d103      	bne.n	8000664 <USART_ProcessRxData+0x54>
			USART2_DataBufferIndexer = RX_UART_DATA_le;
 800065c:	4b34      	ldr	r3, [pc, #208]	; (8000730 <USART_ProcessRxData+0x120>)
 800065e:	2202      	movs	r2, #2
 8000660:	701a      	strb	r2, [r3, #0]
		else if (chr != ENTER)
			USART2_DataBufferIndexer = RX_UART_DATA_None;
		break;
 8000662:	e057      	b.n	8000714 <USART_ProcessRxData+0x104>
		else if (chr != ENTER)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b0d      	cmp	r3, #13
 8000668:	d054      	beq.n	8000714 <USART_ProcessRxData+0x104>
			USART2_DataBufferIndexer = RX_UART_DATA_None;
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <USART_ProcessRxData+0x120>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
		break;
 8000670:	e050      	b.n	8000714 <USART_ProcessRxData+0x104>
	case RX_UART_DATA_le:
		if (chr == 'd')
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b64      	cmp	r3, #100	; 0x64
 8000676:	d103      	bne.n	8000680 <USART_ProcessRxData+0x70>
			USART2_DataBufferIndexer = RX_UART_DATA_led;
 8000678:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <USART_ProcessRxData+0x120>)
 800067a:	2203      	movs	r2, #3
 800067c:	701a      	strb	r2, [r3, #0]
		else if (chr != ENTER)
			USART2_DataBufferIndexer = RX_UART_DATA_None;
		break;
 800067e:	e04b      	b.n	8000718 <USART_ProcessRxData+0x108>
		else if (chr != ENTER)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b0d      	cmp	r3, #13
 8000684:	d048      	beq.n	8000718 <USART_ProcessRxData+0x108>
			USART2_DataBufferIndexer = RX_UART_DATA_None;
 8000686:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <USART_ProcessRxData+0x120>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
		break;
 800068c:	e044      	b.n	8000718 <USART_ProcessRxData+0x108>
	case RX_UART_DATA_led:
		if (chr == 'O')
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2b4f      	cmp	r3, #79	; 0x4f
 8000692:	d103      	bne.n	800069c <USART_ProcessRxData+0x8c>
			USART2_DataBufferIndexer = RX_UART_DATA_ledO;
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <USART_ProcessRxData+0x120>)
 8000696:	2204      	movs	r2, #4
 8000698:	701a      	strb	r2, [r3, #0]
		else if (chr != ENTER)
			USART2_DataBufferIndexer = RX_UART_DATA_None;
		break;
 800069a:	e03f      	b.n	800071c <USART_ProcessRxData+0x10c>
		else if (chr != ENTER)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b0d      	cmp	r3, #13
 80006a0:	d03c      	beq.n	800071c <USART_ProcessRxData+0x10c>
			USART2_DataBufferIndexer = RX_UART_DATA_None;
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <USART_ProcessRxData+0x120>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
		break;
 80006a8:	e038      	b.n	800071c <USART_ProcessRxData+0x10c>
	case RX_UART_DATA_ledO:
		if (chr == 'N')
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b4e      	cmp	r3, #78	; 0x4e
 80006ae:	d103      	bne.n	80006b8 <USART_ProcessRxData+0xa8>
			USART2_DataBufferIndexer = RX_UART_DATA_ledON;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <USART_ProcessRxData+0x120>)
 80006b2:	2205      	movs	r2, #5
 80006b4:	701a      	strb	r2, [r3, #0]
		else if (chr == 'F')
			USART2_DataBufferIndexer = RX_UART_DATA_ledOF;
		else if (chr != ENTER)
			USART2_DataBufferIndexer = RX_UART_DATA_None;
		break;
 80006b6:	e033      	b.n	8000720 <USART_ProcessRxData+0x110>
		else if (chr == 'F')
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b46      	cmp	r3, #70	; 0x46
 80006bc:	d103      	bne.n	80006c6 <USART_ProcessRxData+0xb6>
			USART2_DataBufferIndexer = RX_UART_DATA_ledOF;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <USART_ProcessRxData+0x120>)
 80006c0:	2206      	movs	r2, #6
 80006c2:	701a      	strb	r2, [r3, #0]
		break;
 80006c4:	e02c      	b.n	8000720 <USART_ProcessRxData+0x110>
		else if (chr != ENTER)
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	2b0d      	cmp	r3, #13
 80006ca:	d029      	beq.n	8000720 <USART_ProcessRxData+0x110>
			USART2_DataBufferIndexer = RX_UART_DATA_None;
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <USART_ProcessRxData+0x120>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
		break;
 80006d2:	e025      	b.n	8000720 <USART_ProcessRxData+0x110>
	case RX_UART_DATA_ledON:
		LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
 80006d4:	2108      	movs	r1, #8
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <USART_ProcessRxData+0x124>)
 80006d8:	f7ff ff20 	bl	800051c <LL_GPIO_SetOutputPin>
		USART2_DataBufferIndexer = RX_UART_DATA_None;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <USART_ProcessRxData+0x120>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
		break;
 80006e2:	e020      	b.n	8000726 <USART_ProcessRxData+0x116>
	case RX_UART_DATA_ledOF:
		if (chr == 'F')
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b46      	cmp	r3, #70	; 0x46
 80006e8:	d103      	bne.n	80006f2 <USART_ProcessRxData+0xe2>
			USART2_DataBufferIndexer = RX_UART_DATA_ledOFF;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <USART_ProcessRxData+0x120>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	701a      	strb	r2, [r3, #0]
		else if (chr != ENTER)
			USART2_DataBufferIndexer = RX_UART_DATA_None;
		break;
 80006f0:	e018      	b.n	8000724 <USART_ProcessRxData+0x114>
		else if (chr != ENTER)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0d      	cmp	r3, #13
 80006f6:	d015      	beq.n	8000724 <USART_ProcessRxData+0x114>
			USART2_DataBufferIndexer = RX_UART_DATA_None;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <USART_ProcessRxData+0x120>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
		break;
 80006fe:	e011      	b.n	8000724 <USART_ProcessRxData+0x114>
	case RX_UART_DATA_ledOFF:
		LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000700:	2108      	movs	r1, #8
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <USART_ProcessRxData+0x124>)
 8000704:	f7ff ff18 	bl	8000538 <LL_GPIO_ResetOutputPin>
		USART2_DataBufferIndexer = RX_UART_DATA_None;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <USART_ProcessRxData+0x120>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		break;
 800070e:	e00a      	b.n	8000726 <USART_ProcessRxData+0x116>
		break;
 8000710:	bf00      	nop
 8000712:	e008      	b.n	8000726 <USART_ProcessRxData+0x116>
		break;
 8000714:	bf00      	nop
 8000716:	e006      	b.n	8000726 <USART_ProcessRxData+0x116>
		break;
 8000718:	bf00      	nop
 800071a:	e004      	b.n	8000726 <USART_ProcessRxData+0x116>
		break;
 800071c:	bf00      	nop
 800071e:	e002      	b.n	8000726 <USART_ProcessRxData+0x116>
		break;
 8000720:	bf00      	nop
 8000722:	e000      	b.n	8000726 <USART_ProcessRxData+0x116>
		break;
 8000724:	bf00      	nop

	}
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000024 	.word	0x20000024
 8000734:	48000400 	.word	0x48000400

08000738 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	f003 0320 	and.w	r3, r3, #32
 8000748:	2b20      	cmp	r3, #32
 800074a:	d101      	bne.n	8000750 <LL_USART_IsActiveFlag_RXNE+0x18>
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2db      	uxtb	r3, r3
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800077e:	e7fe      	b.n	800077e <NMI_Handler+0x4>

08000780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <HardFault_Handler+0x4>

08000786 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <MemManage_Handler+0x4>

0800078c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <BusFault_Handler+0x4>

08000792 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <USART2_IRQHandler+0x24>)
 80007d6:	f7ff ffaf 	bl	8000738 <LL_USART_IsActiveFlag_RXNE>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d006      	beq.n	80007ee <USART2_IRQHandler+0x1e>
		USART2_HandlerRx(LL_USART_ReceiveData8(USART2));
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <USART2_IRQHandler+0x24>)
 80007e2:	f7ff ffbc 	bl	800075e <LL_USART_ReceiveData8>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f9b3 	bl	8000b54 <USART2_HandlerRx>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40004400 	.word	0x40004400

080007f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <SystemInit+0x20>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <SystemInit+0x20>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__NVIC_GetPriorityGrouping+0x18>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	0a1b      	lsrs	r3, r3, #8
 8000826:	f003 0307 	and.w	r3, r3, #7
}
 800082a:	4618      	mov	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	2b00      	cmp	r3, #0
 8000848:	db0b      	blt.n	8000862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 021f 	and.w	r2, r3, #31
 8000850:	4907      	ldr	r1, [pc, #28]	; (8000870 <__NVIC_EnableIRQ+0x38>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	095b      	lsrs	r3, r3, #5
 8000858:	2001      	movs	r0, #1
 800085a:	fa00 f202 	lsl.w	r2, r0, r2
 800085e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <LL_AHB1_GRP1_EnableClock>:
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800093a:	695a      	ldr	r2, [r3, #20]
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4013      	ands	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000

08000960 <LL_APB1_GRP1_EnableClock>:
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <LL_APB1_GRP1_EnableClock+0x2c>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	4907      	ldr	r1, [pc, #28]	; (800098c <LL_APB1_GRP1_EnableClock+0x2c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4313      	orrs	r3, r2
 8000972:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000976:	69da      	ldr	r2, [r3, #28]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4013      	ands	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	40021000 	.word	0x40021000

08000990 <LL_USART_Enable>:
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f043 0201 	orr.w	r2, r3, #1
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_USART_ConfigAsyncMode>:
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	609a      	str	r2, [r3, #8]
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <LL_USART_EnableIT_RXNE>:
{
 80009dc:	b480      	push	{r7}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	e853 3f00 	ldrex	r3, [r3]
 80009ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	f043 0320 	orr.w	r3, r3, #32
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	61ba      	str	r2, [r7, #24]
 80009fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a00:	6979      	ldr	r1, [r7, #20]
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	e841 2300 	strex	r3, r2, [r1]
 8000a08:	613b      	str	r3, [r7, #16]
   return(result);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1e9      	bne.n	80009e4 <LL_USART_EnableIT_RXNE+0x8>
}
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_USART_DisableIT_CTS>:
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b089      	sub	sp, #36	; 0x24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3308      	adds	r3, #8
 8000a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	e853 3f00 	ldrex	r3, [r3]
 8000a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3308      	adds	r3, #8
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	61ba      	str	r2, [r7, #24]
 8000a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000a46:	6979      	ldr	r1, [r7, #20]
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	e841 2300 	strex	r3, r2, [r1]
 8000a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1e7      	bne.n	8000a26 <LL_USART_DisableIT_CTS+0x8>
}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	3724      	adds	r7, #36	; 0x24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000a8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a92:	f7ff ff65 	bl	8000960 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a9a:	f7ff ff49 	bl	8000930 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a9e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000aa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac0:	f000 f98a 	bl	8000dd8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ac4:	f7ff feaa 	bl	800081c <__NVIC_GetPriorityGrouping>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fefa 	bl	80008c8 <NVIC_EncodePriority>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	2026      	movs	r0, #38	; 0x26
 8000ada:	f7ff fecb 	bl	8000874 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000ade:	2026      	movs	r0, #38	; 0x26
 8000ae0:	f7ff feaa 	bl	8000838 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 8000ae4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000ae8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000af6:	230c      	movs	r3, #12
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000afe:	2300      	movs	r3, #0
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <MX_USART2_UART_Init+0xcc>)
 8000b0a:	f000 fbed 	bl	80012e8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8000b0e:	4808      	ldr	r0, [pc, #32]	; (8000b30 <MX_USART2_UART_Init+0xcc>)
 8000b10:	f7ff ff85 	bl	8000a1e <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_USART2_UART_Init+0xcc>)
 8000b16:	f7ff ff4b 	bl	80009b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART2_UART_Init+0xcc>)
 8000b1c:	f7ff ff38 	bl	8000990 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */
	LL_USART_EnableIT_RXNE(USART2);
 8000b20:	4803      	ldr	r0, [pc, #12]	; (8000b30 <MX_USART2_UART_Init+0xcc>)
 8000b22:	f7ff ff5b 	bl	80009dc <LL_USART_EnableIT_RXNE>
  /* USER CODE END USART2_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3738      	adds	r7, #56	; 0x38
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40004400 	.word	0x40004400

08000b34 <USART2_RegisterCallback>:

/* USER CODE BEGIN 1 */
void USART2_RegisterCallback(void *callback) {
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	USART2_Call_Back = callback;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <USART2_RegisterCallback+0x1c>)
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000020 	.word	0x20000020

08000b54 <USART2_HandlerRx>:

void USART2_HandlerRx(uint8_t chr) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	if (USART2_Call_Back != 0) {
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <USART2_HandlerRx+0x24>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d004      	beq.n	8000b70 <USART2_HandlerRx+0x1c>
		USART2_Call_Back(chr);
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <USART2_HandlerRx+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4798      	blx	r3
	}
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000020 	.word	0x20000020

08000b7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff fe27 	bl	80007f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f000 fc41 	bl	8001430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bae:	f7ff fcd1 	bl	8000554 <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000bc0:	080014b0 	.word	0x080014b0
  ldr r2, =_sbss
 8000bc4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000bc8:	20000028 	.word	0x20000028

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>

08000bce <LL_GPIO_SetPinMode>:
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b089      	sub	sp, #36	; 0x24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	fa93 f3a3 	rbit	r3, r3
 8000be8:	613b      	str	r3, [r7, #16]
  return result;
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	fab3 f383 	clz	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2103      	movs	r1, #3
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	fa93 f3a3 	rbit	r3, r3
 8000c08:	61bb      	str	r3, [r7, #24]
  return result;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	3724      	adds	r7, #36	; 0x24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_GPIO_SetPinOutputType>:
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	401a      	ands	r2, r3
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	605a      	str	r2, [r3, #4]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_GPIO_SetPinSpeed>:
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa93 f3a3 	rbit	r3, r3
 8000c76:	613b      	str	r3, [r7, #16]
  return result;
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	fab3 f383 	clz	r3, r3
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2103      	movs	r1, #3
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	fa93 f3a3 	rbit	r3, r3
 8000c96:	61bb      	str	r3, [r7, #24]
  return result;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fab3 f383 	clz	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	609a      	str	r2, [r3, #8]
}
 8000cae:	bf00      	nop
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_GPIO_SetPinPull>:
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b089      	sub	sp, #36	; 0x24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	68da      	ldr	r2, [r3, #12]
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa93 f3a3 	rbit	r3, r3
 8000cd4:	613b      	str	r3, [r7, #16]
  return result;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	fab3 f383 	clz	r3, r3
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	401a      	ands	r2, r3
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	61bb      	str	r3, [r7, #24]
  return result;
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	fab3 f383 	clz	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	431a      	orrs	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	60da      	str	r2, [r3, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3724      	adds	r7, #36	; 0x24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_GPIO_SetAFPin_0_7>:
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6a1a      	ldr	r2, [r3, #32]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa93 f3a3 	rbit	r3, r3
 8000d32:	613b      	str	r3, [r7, #16]
  return result;
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	fab3 f383 	clz	r3, r3
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	210f      	movs	r1, #15
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	401a      	ands	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	61bb      	str	r3, [r7, #24]
  return result;
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fab3 f383 	clz	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	431a      	orrs	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	621a      	str	r2, [r3, #32]
}
 8000d6a:	bf00      	nop
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_GPIO_SetAFPin_8_15>:
{
 8000d76:	b480      	push	{r7}
 8000d78:	b089      	sub	sp, #36	; 0x24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa93 f3a3 	rbit	r3, r3
 8000d92:	613b      	str	r3, [r7, #16]
  return result;
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	fab3 f383 	clz	r3, r3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	210f      	movs	r1, #15
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	401a      	ands	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	61bb      	str	r3, [r7, #24]
  return result;
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000dcc:	bf00      	nop
 8000dce:	3724      	adds	r7, #36	; 0x24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	613b      	str	r3, [r7, #16]
  return result;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	fab3 f383 	clz	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000dfa:	e051      	b.n	8000ea0 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d043      	beq.n	8000e9a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d003      	beq.n	8000e22 <LL_GPIO_Init+0x4a>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d10e      	bne.n	8000e40 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	461a      	mov	r2, r3
 8000e28:	69b9      	ldr	r1, [r7, #24]
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff16 	bl	8000c5c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6819      	ldr	r1, [r3, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fef6 	bl	8000c2c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	461a      	mov	r2, r3
 8000e46:	69b9      	ldr	r1, [r7, #24]
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff36 	bl	8000cba <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d11a      	bne.n	8000e8c <LL_GPIO_Init+0xb4>
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	fa93 f3a3 	rbit	r3, r3
 8000e60:	60bb      	str	r3, [r7, #8]
  return result;
 8000e62:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e64:	fab3 f383 	clz	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b07      	cmp	r3, #7
 8000e6c:	d807      	bhi.n	8000e7e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	461a      	mov	r2, r3
 8000e74:	69b9      	ldr	r1, [r7, #24]
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff4e 	bl	8000d18 <LL_GPIO_SetAFPin_0_7>
 8000e7c:	e006      	b.n	8000e8c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	461a      	mov	r2, r3
 8000e84:	69b9      	ldr	r1, [r7, #24]
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff75 	bl	8000d76 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	461a      	mov	r2, r3
 8000e92:	69b9      	ldr	r1, [r7, #24]
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fe9a 	bl	8000bce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1a6      	bne.n	8000dfc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <LL_RCC_HSI_IsReady>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <LL_RCC_HSI_IsReady+0x20>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	bf0c      	ite	eq
 8000ec8:	2301      	moveq	r3, #1
 8000eca:	2300      	movne	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_RCC_LSE_IsReady>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <LL_RCC_LSE_IsReady+0x20>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	bf0c      	ite	eq
 8000eec:	2301      	moveq	r3, #1
 8000eee:	2300      	movne	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40021000 	.word	0x40021000

08000f00 <LL_RCC_GetSysClkSource>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <LL_RCC_GetSysClkSource+0x18>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 030c 	and.w	r3, r3, #12
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000

08000f1c <LL_RCC_GetAHBPrescaler>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <LL_RCC_GetAHBPrescaler+0x18>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000

08000f38 <LL_RCC_GetAPB1Prescaler>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <LL_RCC_GetAPB2Prescaler>:
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <LL_RCC_GetAPB2Prescaler+0x18>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <LL_RCC_GetUSARTClockSource>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <LL_RCC_GetUSARTClockSource+0x28>)
 8000f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	401a      	ands	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	061b      	lsls	r3, r3, #24
 8000f8a:	4313      	orrs	r3, r2
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40021000 	.word	0x40021000

08000f9c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <LL_RCC_PLL_GetMainSource+0x18>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <LL_RCC_PLL_GetPrediv+0x18>)
 8000fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fdc:	f003 030f 	and.w	r3, r3, #15
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40021000 	.word	0x40021000

08000ff0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000ff8:	f000 f864 	bl	80010c4 <RCC_GetSystemClockFreq>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f882 	bl	8001110 <RCC_GetHCLKClockFreq>
 800100c:	4602      	mov	r2, r0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f890 	bl	800113c <RCC_GetPCLK1ClockFreq>
 800101c:	4602      	mov	r2, r0
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f89c 	bl	8001164 <RCC_GetPCLK2ClockFreq>
 800102c:	4602      	mov	r2, r0
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60da      	str	r2, [r3, #12]
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d12d      	bne.n	80010aa <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff8e 	bl	8000f70 <LL_RCC_GetUSARTClockSource>
 8001054:	4603      	mov	r3, r0
 8001056:	2b03      	cmp	r3, #3
 8001058:	d00a      	beq.n	8001070 <LL_RCC_GetUSARTClockFreq+0x34>
 800105a:	2b03      	cmp	r3, #3
 800105c:	d819      	bhi.n	8001092 <LL_RCC_GetUSARTClockFreq+0x56>
 800105e:	2b01      	cmp	r3, #1
 8001060:	d002      	beq.n	8001068 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001062:	2b02      	cmp	r3, #2
 8001064:	d00c      	beq.n	8001080 <LL_RCC_GetUSARTClockFreq+0x44>
 8001066:	e014      	b.n	8001092 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001068:	f000 f82c 	bl	80010c4 <RCC_GetSystemClockFreq>
 800106c:	60f8      	str	r0, [r7, #12]
        break;
 800106e:	e021      	b.n	80010b4 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001070:	f7ff ff22 	bl	8000eb8 <LL_RCC_HSI_IsReady>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d019      	beq.n	80010ae <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <LL_RCC_GetUSARTClockFreq+0x84>)
 800107c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800107e:	e016      	b.n	80010ae <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001080:	f7ff ff2c 	bl	8000edc <LL_RCC_LSE_IsReady>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d013      	beq.n	80010b2 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 800108a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800108e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001090:	e00f      	b.n	80010b2 <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001092:	f000 f817 	bl	80010c4 <RCC_GetSystemClockFreq>
 8001096:	4603      	mov	r3, r0
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f839 	bl	8001110 <RCC_GetHCLKClockFreq>
 800109e:	4603      	mov	r3, r0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 f84b 	bl	800113c <RCC_GetPCLK1ClockFreq>
 80010a6:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80010a8:	e004      	b.n	80010b4 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80010aa:	bf00      	nop
 80010ac:	e002      	b.n	80010b4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80010ae:	bf00      	nop
 80010b0:	e000      	b.n	80010b4 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80010b2:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	007a1200 	.word	0x007a1200

080010c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80010ce:	f7ff ff17 	bl	8000f00 <LL_RCC_GetSysClkSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d00c      	beq.n	80010f2 <RCC_GetSystemClockFreq+0x2e>
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d80e      	bhi.n	80010fa <RCC_GetSystemClockFreq+0x36>
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <RCC_GetSystemClockFreq+0x22>
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d003      	beq.n	80010ec <RCC_GetSystemClockFreq+0x28>
 80010e4:	e009      	b.n	80010fa <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <RCC_GetSystemClockFreq+0x48>)
 80010e8:	607b      	str	r3, [r7, #4]
      break;
 80010ea:	e009      	b.n	8001100 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <RCC_GetSystemClockFreq+0x48>)
 80010ee:	607b      	str	r3, [r7, #4]
      break;
 80010f0:	e006      	b.n	8001100 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80010f2:	f000 f84b 	bl	800118c <RCC_PLL_GetFreqDomain_SYS>
 80010f6:	6078      	str	r0, [r7, #4]
      break;
 80010f8:	e002      	b.n	8001100 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <RCC_GetSystemClockFreq+0x48>)
 80010fc:	607b      	str	r3, [r7, #4]
      break;
 80010fe:	bf00      	nop
  }

  return frequency;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	007a1200 	.word	0x007a1200

08001110 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001118:	f7ff ff00 	bl	8000f1c <LL_RCC_GetAHBPrescaler>
 800111c:	4603      	mov	r3, r0
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <RCC_GetHCLKClockFreq+0x28>)
 8001126:	5cd3      	ldrb	r3, [r2, r3]
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	40d3      	lsrs	r3, r2
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	08001490 	.word	0x08001490

0800113c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001144:	f7ff fef8 	bl	8000f38 <LL_RCC_GetAPB1Prescaler>
 8001148:	4603      	mov	r3, r0
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <RCC_GetPCLK1ClockFreq+0x24>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	40d3      	lsrs	r3, r2
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	080014a0 	.word	0x080014a0

08001164 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800116c:	f7ff fef2 	bl	8000f54 <LL_RCC_GetAPB2Prescaler>
 8001170:	4603      	mov	r3, r0
 8001172:	0adb      	lsrs	r3, r3, #11
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <RCC_GetPCLK2ClockFreq+0x24>)
 8001176:	5cd3      	ldrb	r3, [r2, r3]
 8001178:	461a      	mov	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	40d3      	lsrs	r3, r2
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	080014a0 	.word	0x080014a0

0800118c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800119a:	f7ff feff 	bl	8000f9c <LL_RCC_PLL_GetMainSource>
 800119e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ac:	d003      	beq.n	80011b6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80011ae:	e005      	b.n	80011bc <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80011b2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80011b4:	e005      	b.n	80011c2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80011b8:	60fb      	str	r3, [r7, #12]
      break;
 80011ba:	e002      	b.n	80011c2 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80011be:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80011c0:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80011c2:	f7ff ff07 	bl	8000fd4 <LL_RCC_PLL_GetPrediv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	3301      	adds	r3, #1
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	fbb2 f4f3 	udiv	r4, r2, r3
 80011d0:	f7ff fef2 	bl	8000fb8 <LL_RCC_PLL_GetMultiplicator>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80011da:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80011de:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	fa92 f2a2 	rbit	r2, r2
 80011e6:	603a      	str	r2, [r7, #0]
  return result;
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	40d3      	lsrs	r3, r2
 80011f2:	3302      	adds	r3, #2
 80011f4:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	003d0900 	.word	0x003d0900
 8001204:	007a1200 	.word	0x007a1200

08001208 <LL_USART_IsEnabled>:
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <LL_USART_IsEnabled+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_USART_IsEnabled+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_USART_SetStopBitsLength>:
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	605a      	str	r2, [r3, #4]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_USART_SetHWFlowCtrl>:
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	609a      	str	r2, [r3, #8]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <LL_USART_SetBaudRate>:
{
 800127a:	b480      	push	{r7}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800128e:	d11a      	bne.n	80012c6 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	005a      	lsls	r2, r3, #1
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	441a      	add	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	60da      	str	r2, [r3, #12]
}
 80012c4:	e00a      	b.n	80012dc <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	085a      	lsrs	r2, r3, #1
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	441a      	add	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	60da      	str	r2, [r3, #12]
}
 80012dc:	bf00      	nop
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff84 	bl	8001208 <LL_USART_IsEnabled>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d14e      	bne.n	80013a4 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <LL_USART_Init+0xc8>)
 800130c:	4013      	ands	r3, r2
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	6851      	ldr	r1, [r2, #4]
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	68d2      	ldr	r2, [r2, #12]
 8001316:	4311      	orrs	r1, r2
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	6912      	ldr	r2, [r2, #16]
 800131c:	4311      	orrs	r1, r2
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	6992      	ldr	r2, [r2, #24]
 8001322:	430a      	orrs	r2, r1
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	4619      	mov	r1, r3
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff7c 	bl	800122e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	4619      	mov	r1, r3
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff89 	bl	8001254 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <LL_USART_Init+0xcc>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d104      	bne.n	8001354 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff fe76 	bl	800103c <LL_RCC_GetUSARTClockFreq>
 8001350:	61b8      	str	r0, [r7, #24]
 8001352:	e016      	b.n	8001382 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <LL_USART_Init+0xd0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d107      	bne.n	800136c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe45 	bl	8000ff0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	e00a      	b.n	8001382 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a13      	ldr	r2, [pc, #76]	; (80013bc <LL_USART_Init+0xd4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d106      	bne.n	8001382 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe39 	bl	8000ff0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00d      	beq.n	80013a4 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d009      	beq.n	80013a4 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001390:	2300      	movs	r3, #0
 8001392:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	699a      	ldr	r2, [r3, #24]
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	69b9      	ldr	r1, [r7, #24]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff6b 	bl	800127a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80013a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	efff69f3 	.word	0xefff69f3
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40004400 	.word	0x40004400
 80013bc:	40004800 	.word	0x40004800

080013c0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <LL_InitTick+0x30>)
 80013d4:	3b01      	subs	r3, #1
 80013d6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80013d8:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <LL_InitTick+0x30>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <LL_InitTick+0x30>)
 80013e0:	2205      	movs	r2, #5
 80013e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80013fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ffdd 	bl	80013c0 <LL_InitTick>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <LL_SetSystemCoreClock+0x1c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000

08001430 <__libc_init_array>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	4d0d      	ldr	r5, [pc, #52]	; (8001468 <__libc_init_array+0x38>)
 8001434:	4c0d      	ldr	r4, [pc, #52]	; (800146c <__libc_init_array+0x3c>)
 8001436:	1b64      	subs	r4, r4, r5
 8001438:	10a4      	asrs	r4, r4, #2
 800143a:	2600      	movs	r6, #0
 800143c:	42a6      	cmp	r6, r4
 800143e:	d109      	bne.n	8001454 <__libc_init_array+0x24>
 8001440:	4d0b      	ldr	r5, [pc, #44]	; (8001470 <__libc_init_array+0x40>)
 8001442:	4c0c      	ldr	r4, [pc, #48]	; (8001474 <__libc_init_array+0x44>)
 8001444:	f000 f818 	bl	8001478 <_init>
 8001448:	1b64      	subs	r4, r4, r5
 800144a:	10a4      	asrs	r4, r4, #2
 800144c:	2600      	movs	r6, #0
 800144e:	42a6      	cmp	r6, r4
 8001450:	d105      	bne.n	800145e <__libc_init_array+0x2e>
 8001452:	bd70      	pop	{r4, r5, r6, pc}
 8001454:	f855 3b04 	ldr.w	r3, [r5], #4
 8001458:	4798      	blx	r3
 800145a:	3601      	adds	r6, #1
 800145c:	e7ee      	b.n	800143c <__libc_init_array+0xc>
 800145e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001462:	4798      	blx	r3
 8001464:	3601      	adds	r6, #1
 8001466:	e7f2      	b.n	800144e <__libc_init_array+0x1e>
 8001468:	080014a8 	.word	0x080014a8
 800146c:	080014a8 	.word	0x080014a8
 8001470:	080014a8 	.word	0x080014a8
 8001474:	080014ac 	.word	0x080014ac

08001478 <_init>:
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	bf00      	nop
 800147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147e:	bc08      	pop	{r3}
 8001480:	469e      	mov	lr, r3
 8001482:	4770      	bx	lr

08001484 <_fini>:
 8001484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001486:	bf00      	nop
 8001488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148a:	bc08      	pop	{r3}
 800148c:	469e      	mov	lr, r3
 800148e:	4770      	bx	lr
